-- Backup of functionS, procedures and triggers

-- Functions 

CREATE OR REPLACE FUNCTION FUN_CONTADOR_FALTAS(FUNMATRICULA IN VARCHAR2, FUNMATERIA IN VARCHAR2) RETURN NUMBER IS
  CUENTA INT;
BEGIN
  SELECT COUNT(IDMATERIA) INTO CUENTA FROM FALTAS JOIN MATERIA USING(IDMATERIA) 
  WHERE  MATRICULAAL = FUNMATRICULA AND IDMATERIA=FUNMATERIA;
  RETURN CUENTA;
END;


CREATE OR REPLACE FUNCTION FUN_GENERA_MT(USUARIO IN VARCHAR2) RETURN VARCHAR2 IS 
  AUX_CONT INT; 
  MATRICULA CHAR(7);
BEGIN 
  IF(USUARIO = 'ADMINISTRADOR')THEN 
    SELECT CONTADORADMINISTRADOR+1 INTO AUX_CONT FROM CONTADOR;
    MATRICULA := 'ADM'||LPAD(AUX_CONT,4,'0');
  ELSIF(USUARIO = 'PROFESOR') THEN 
    SELECT CONTADORPROFESOR+1 INTO AUX_CONT FROM CONTADOR;
    MATRICULA := 'PR'||LPAD(AUX_CONT,5,'0');
  ELSIF(USUARIO = 'ALUMNO')THEN
  SELECT CONTADORALUMNO+1 INTO AUX_CONT FROM CONTADOR;
    MATRICULA := 'AL'||LPAD(AUX_CONT,5,'0');
  END IF; 
  RETURN MATRICULA;
END;


CREATE OR REPLACE FUNCTION FUN_OBTENER_IDKARDEX(PMATRICULA_AL IN VARCHAR2) RETURN VARCHAR2 IS
  ID_KARDEX CHAR(7 BYTE);
BEGIN
  SELECT IDKARDEX  INTO ID_KARDEX FROM KARDEX WHERE MATRICULAAL = PMATRICULA_AL;
  RETURN ID_KARDEX;
END;

-- Procedures

CREATE OR REPLACE PROCEDURE PRO_ACTUALIZAR_SEMESTRE(PID_KARDEX IN VARCHAR2, PSEMESTRE IN INT)IS
  CURSADA INT;
BEGIN
  CURSADA := PSEMESTRE - 1;
  DBMS_OUTPUT.PUT_LINE(CURSADA);
UPDATE (SELECT * FROM CALIFICACIONES JOIN MATERIA USING(IDMATERIA) WHERE IDKARDEX = PID_KARDEX AND SEMESTRE = PSEMESTRE) SET STATUS = 'CURSANDO';
UPDATE (SELECT * FROM CALIFICACIONES JOIN MATERIA USING(IDMATERIA) WHERE IDKARDEX = PID_KARDEX AND SEMESTRE = CURSADA) SET STATUS = 'CURSADA';

END;


CREATE OR REPLACE PROCEDURE PRO_CAMBIAR_CURSANDO(PID_KARDEX IN VARCHAR2, PSEMESTRE IN VARCHAR2) IS
BEGIN 
UPDATE (SELECT * FROM CALIFICACIONES JOIN MATERIA USING(IDMATERIA) WHERE IDKARDEX = PID_KARDEX AND SEMESTRE = PSEMESTRE) SET STATUS = 'CURSANDO';
END;


-- Triggers

-- Administrador Table 

CREATE OR REPLACE TRIGGER TG_BI_ADMINISTRADOR 
BEFORE INSERT ON ADMINISTRADOR 
FOR EACH ROW
DECLARE 
  AUX_CONT INT; 
BEGIN
    UPDATE CONTADOR SET 
    CONTADORADMINISTRADOR = CONTADORADMINISTRADOR +1
    RETURNING CONTADORADMINISTRADOR INTO AUX_CONT; 
    :NEW.MATRICULAADM :=  'ADM'||LPAD(AUX_CONT, 4,'0');
    :NEW.CORREOINSTITUCIONAL := :NEW.MATRICULAADM||'@institucion.com';
END;

-- Alumno Table 

CREATE OR REPLACE TRIGGER TG_AI_KARDEX 
AFTER INSERT
ON ALUMNO
FOR EACH ROW
DECLARE 
    AUX_CONT INT;
BEGIN
    UPDATE CONTADOR SET 
    CONTADORKARDEX = CONTADORKARDEX +1 
    RETURNING CONTADORKARDEX INTO AUX_CONT;    
    INSERT INTO KARDEX VALUES ('KAR'||LPAD(AUX_CONT,4,'0'),:NEW.MATRICULAAL,:NEW.IDCARRERA);   
END;


CREATE OR REPLACE TRIGGER TG_BI_ALUMNO
BEFORE INSERT ON ALUMNO
FOR EACH ROW
DECLARE 
  AUX_CONT INT; 
BEGIN
    UPDATE CONTADOR SET 
    CONTADORALUMNO = CONTADORALUMNO +1
    RETURNING CONTADORALUMNO INTO AUX_CONT; 
    :NEW.MATRICULAAL := 'AL'||LPAD(AUX_CONT, 5,'0');
    :NEW.CORREOINSTITUCIONAL := :NEW.MATRICULAAL||'@institucion.com';
END;

CREATE OR REPLACE TRIGGER TG_AU_ALUMNO
AFTER UPDATE ON ALUMNO
FOR EACH ROW 
DECLARE
  ID_MAT CHAR(7 BYTE);
  AUX_CONT INT;
  SEMESTRE INT;
  CURSOR cCALIFICACIONES IS 
    SELECT IDMATERIA FROM MATERIA WHERE IDCARRERA = :NEW.IDCARRERA;
BEGIN
  IF :NEW.idCarrera != :OLD.idCarrera THEN 
  UPDATE KARDEX SET idCarrera = :NEW.idCarrera; 
  --Eliminar calificaciones 
  DELETE FROM Calificaciones WHERE idKardex = (select idKardex from kardex where matriculaAl = :OLD.matriculaAL);
  --Generar nuevas calificaciones 
  FOR N IN cCALIFICACIONES LOOP 
    INSERT INTO CALIFICACIONES (IDCALIFICACION, PARCIAL1, PARCIAL2, PARCIAL3, PROMEDIO, IDMATERIA, IDKARDEX, STATUS) 
    VALUES('C'||LPAD(AUX_CONT, 6, '0'), 0,0,0,0, N.IDMATERIA, (select idKardex from kardex where matriculaAl = :OLD.matriculaAL), 'NO CURSADA' );
  END LOOP; 
END IF;
  IF :NEW.iDGrupo != :OLD.iDGrupo THEN 
    DELETE FROM FALTAS WHERE matriculaAl = :OLD.matriculaAl;    
  END IF;
END;


CREATE OR REPLACE TRIGGER TG_BD_ALUMNO 
BEFORE DELETE ON ALUMNO 
FOR EACH ROW 
DECLARE 
ID_KARDEX CHAR(7 BYTE);
BEGIN 
  SELECT FUN_OBTENER_IDKARDEX(:OLD.MATRICULAAL) INTO ID_KARDEX FROM DUAL;
  DELETE FROM CALIFICACIONES WHERE IDKARDEX = ID_KARDEX;
  DELETE FROM KARDEX WHERE MATRICULAAL = :OLD.MATRICULAAL;
  DELETE FROM FALTAS WHERE MATRICULAAL = :OLD.MATRICULAAL;
END;


-- Calificaciones Table 

CREATE OR REPLACE TRIGGER TG_BI_CALIFICACIONES
BEFORE INSERT ON CALIFICACIONES
FOR EACH ROW
DECLARE 
  AUX_CONT INT; 
BEGIN
    UPDATE CONTADOR SET 
    CONTCALIF = CONTCALIF +1
    RETURNING CONTCALIF INTO AUX_CONT; 
    :NEW.IDCALIFICACION := 'C'||LPAD(AUX_CONT, 6,'0');
END;

-- Carrera Table 

CREATE OR REPLACE TRIGGER TG_BI_CARRERA
BEFORE INSERT ON CARRERA
FOR EACH ROW
DECLARE 
  AUX_CONT INT; 
BEGIN
    UPDATE CONTADOR SET 
    CONTADORCARRERA = CONTADORCARRERA +1
    RETURNING CONTADORCARRERA INTO AUX_CONT; 
    :NEW.IDCARRERA := 'CAR'||LPAD(AUX_CONT, 4,'0');
END;

-- Contador Table 
--SQL

  CREATE TABLE "SYSTEM"."CONTADOR" 
   (	"CONTADORADMINISTRADOR" NUMBER(*,0), 
	"CONTADORPROFESOR" NUMBER(*,0), 
	"CONTADORALUMNO" NUMBER(*,0), 
	"CONTADORKARDEX" NUMBER(*,0), 
	"CONTCALIF" NUMBER(*,0), 
	"CONTADORMTERIA" NUMBER, 
	"CONTADORCARRERA" NUMBER(*,0), 
	"CONTADORFALTAS" NUMBER(*,0), 
	"CONTADORGRUPOS" NUMBER(*,0), 
	"CONTADORHORARIOS" NUMBER(*,0), 
	"CONTADORSALON" NUMBER(*,0), 
	"FECHAINICIOCLASES" DATE, 
	"FECHAFINCLASES" DATE
   ) PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;


-- Faltas Table 

CREATE OR REPLACE TRIGGER TG_BI_FALTAS
BEFORE INSERT ON FALTAS
FOR EACH ROW
DECLARE 
  AUX_CONT INT; 
BEGIN
    UPDATE CONTADOR SET 
    CONTADORFALTAS = CONTADORFALTAS +1
    RETURNING CONTADORFALTAS INTO AUX_CONT; 
    :NEW.IDFALTA := 'F'||LPAD(AUX_CONT, 6,'0');
END;

-- Grupo Table 

CREATE OR REPLACE TRIGGER TG_BI_GRUPO
BEFORE INSERT ON GRUPO
FOR EACH ROW
DECLARE 
  AUX_CONT INT; 
BEGIN
    UPDATE CONTADOR SET 
    CONTADORGRUPOS = CONTADORGRUPOS +1
    RETURNING CONTADORGRUPOS INTO AUX_CONT; 
    :NEW.IDGRUPO := 'GRU'||LPAD(AUX_CONT, 4,'0');
END;


-- Horario Table 

CREATE OR REPLACE TRIGGER TG_BI_HORARIO
BEFORE INSERT ON HORARIO
FOR EACH ROW
DECLARE 
  AUX_CONT INT; 
BEGIN
    UPDATE CONTADOR SET 
    CONTADORHORARIOS = CONTADORHORARIOS +1
    RETURNING CONTADORHORARIOS INTO AUX_CONT; 
    :NEW.IDHORARIO := 'HOR'||LPAD(AUX_CONT, 4,'0');
END;


-- Kardex Table 

CREATE OR REPLACE TRIGGER TG_AI_CALIFKARDEX 
AFTER INSERT ON KARDEX 
FOR EACH ROW 
DECLARE
  ID_MAT CHAR(7 BYTE);
  AUX_CONT INT;
  CURSOR cCALIFICACIONES IS 
    SELECT IDMATERIA FROM MATERIA WHERE IDCARRERA = :NEW.IDCARRERA;
BEGIN 
  FOR N IN cCALIFICACIONES LOOP 
    --UPDATE CONTADOR SET 
    --CONTCALIF = CONTCALIF + 1
    --RETURNING CONTCALIF INTO AUX_CONT;
    INSERT INTO CALIFICACIONES (IDCALIFICACION, PARCIAL1, PARCIAL2, PARCIAL3, PROMEDIO, IDMATERIA, IDKARDEX, STATUS) 
    VALUES('C'||LPAD(AUX_CONT, 6, '0'), 0,0,0,0, N.IDMATERIA, :NEW.IDKARDEX, 'NO CURSADA' );
  END LOOP; 
END;


-- Materia Table 

CREATE OR REPLACE TRIGGER TG_BI_MATERIA
BEFORE INSERT ON MATERIA
FOR EACH ROW
DECLARE 
  AUX_CONT INT; 
BEGIN
    UPDATE CONTADOR SET 
    CONTADORMTERIA = CONTADORMTERIA +1
    RETURNING CONTADORMTERIA INTO AUX_CONT; 
    :NEW.IDMATERIA := 'MAT'||LPAD(AUX_CONT, 4,'0');
END;


-- Profesor Table 

CREATE OR REPLACE TRIGGER TG_BI_PROFESOR
BEFORE INSERT ON PROFESOR
FOR EACH ROW
DECLARE 
  AUX_CONT INT; 
BEGIN
    UPDATE CONTADOR SET 
    CONTADORPROFESOR = CONTADORPROFESOR +1
    RETURNING CONTADORPROFESOR INTO AUX_CONT; 
    :NEW.MATRICULAPR := 'PR'||LPAD(AUX_CONT, 5,'0');
    :NEW.CORREOINSTITUCIONAL := :NEW.MATRICULAPR||'@institucion.com';
END;


CREATE OR REPLACE TRIGGER TG_AD_PROFESOR 
AFTER DELETE ON PROFESOR 
FOR EACH ROW 
DECLARE 
BEGIN
  DELETE FROM RELPROFESORMATERIA WHERE MATRICULAPR = :OLD.MATRICULAPR;
  --CUANDO ESTE TERMINADO LA ASIGNACION DE HORARIO AQUI TENDREMOS QUE HACER EL DELETE CORRESPONDIENTE
  --CUANDO SE QUIERA ELIMINAR AL PROFESOR
END;


-- Salon Table 

CREATE OR REPLACE TRIGGER TG_BI_SALON
BEFORE INSERT ON SALON
FOR EACH ROW
DECLARE 
  AUX_CONT INT; 
BEGIN
    UPDATE CONTADOR SET 
    CONTADORSALON = CONTADORSALON +1
    RETURNING CONTADORSALON INTO AUX_CONT; 
    :NEW.IDSALON := 'SAL'||LPAD(AUX_CONT, 4,'0');
END;